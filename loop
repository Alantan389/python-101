count loop.  
### 


##### calculate the total negative number when input is 0
# Initialize count variable
count = 0

# Get the first input from the user
val = int(input("Enter a number (0 to stop): "))

# Loop until the user enters 0
while val != 0:
    # Check if the input value is negative
    if val < 0:
        count += 1  # Increment the counter for negative numbers
    
    # Get the next input
    val = int(input("Enter a number (it will not stop until input 0): "))

# Print the total count of negative numbers
print("Total number of negative values entered:", count)






##### calculate the max number when input is 0
# Initialize max to a value lower than any possible positive input
max = -1

# Get the first input
val = int(input("Enter a positive number (enter 0 when done): "))

while val != 0:
    # (A) Check if the current value is greater than max
    if val > max:
        # (B) Update max if it is
        max = val

    # Get the next input
    val = int(input("Enter next number (enter 0 when done): "))

print("The maximum value is:", max)


-----------------------------------------------------------
Write a while loop that prints user_num divided by 2 until user_num is less than 1. The value of user_num changes inside of the loop.

Sample output with input: 20
10.0
5.0
2.5
1.25
0.625


Note: If the submitted code has an infinite loop, 
the system will stop running the code after a few seconds and r
eport "Program end never reached.
" The system doesn't print the test case that caused the reported message.

code : 

user_num = int(input())

''' Your solution goes here '''

while user_num >= 1:
    
    value=user_num/2 
    print(value)
    user_num=value
--------------------------------------------------------------------

The following is an example of using a loop to compute a mathematical quantity. The program computes the greatest common divisor (GCD) among two user-entered integers num_a and num_b, using Euclid's algorithm: If num_a > num_b, set num_a to num_a - num_b, else set num_b to num_b - num_a. 
Repeat until num_a equals num_b, at which point num_a and num_b both equal the GCD.

num_a = int(input('Enter first positive integer: '))
print()

num_b = int(input('Enter second positive integer: '))
print()

while num_a != num_b:
    if num_a > num_b:
        num_a = num_a - num_b
    else:
        num_b = num_b - num_a

print('GCD is {}'.format(num_a))
---------------------------------------------------------------------------
whilp loop

Write an expression that continues to bid until the user enters 'n'.

Sample output with inputs: 'y' 'y' 'n'
I'll bid $7!
Continue bidding? I'll bid $15!
Continue bidding? I'll bid $23!
Continue bidding?



import random
random.seed(5)

keep_going = '-'
next_bid = 0

while keep_going.lower() !='n':
   next_bid = next_bid + random.randint(1, 10)
   print('I\'ll bid ${}!'.format(next_bid))
   print('Continue bidding?', end=' ')
   keep_going = input()

-------------------------------------------------------------------

A common error is to forget to include the loop variable update (e.g., i = i +1) at the end of the loop, causing an unintended infinite loop.

The following program outputs the amount of money in a savings account 
each year for the user-entered number of years, 
with $10,000 initial savings and 5% yearly interest:


print('Initial savings of ${}'.format(initial_savings))
print('at {:.0f}% yearly interest.\n'.format(interest_rate*100))

years = int(input('Enter years: '))
print()

savings = initial_savings
i = 1  # Loop variable
while i <= years:  # Loop condition
    print(' Savings at beginning of year {}: ${:.2f}'.format(i, savings))
    savings = savings + (savings*interest_rate)
    i = i + 1  # Increment loop variable

print('\n')
-----------------------------------------------------------
The below program uses a for loop to calculate savings and interest. 
Try changing the range() function to print every three years instead, using the three-argument alternate version of range(). 
Modify the interest calculation inside the loop to compute three years worth of savings instead of one.

'''Program that calculates savings and interest'''

initial_savings = 10000
interest_rate = 0.05

years = int(input('Enter years: '))
print()

savings = initial_savings
for i in range(years):
    print(' Savings in year {}: ${:.2f}'.format(i, savings))
    savings = savings + (savings*interest_rate)

print('\n')
----------------------------------------------------------------------

"""
Program to print all 2-letter domain names.

Note that ord() and chr() convert between text and the ASCII or Unicode encoding:
-  ord('a') yields the encoded value of 'a', the number 97.
-  ord('a')+1 adds 1 to the encoded value of 'a', giving 98.
-  chr(ord('a')+1) converts 98 back into a letter, producing 'b'
"""
print('Two-letter domain names:')

letter1 = 'a'
letter2 = '?'
while letter1 <= 'z':  # Outer loop
    letter2 = 'a'
    while letter2 <= 'z':  # Inner loop
        print('{}{}.com'.format(letter1, letter2))
        letter2 = chr(ord(letter2) + 1)
    letter1 = chr(ord(letter1) + 1)

-----------------------------------------------------------------

Here is a nested loop example that graphically depicts an integer's magnitude by using asterisks, creating what is commonly called a histogram:

Run the program below and observe the output. Modify the program to print one asterisk per 5 units. So if the user enters 40, print 8 asterisks.

num = 0
while num >= 0:
    num = int(input('Enter an integer (negative to quit):\n'))

    if num >= 0:
        print('Depicted graphically:')
        for i in range(num):
            print('*', end=' ')
        print('\n')

print('Goodbye.')

-----------------------------------------------------------------
Given num_rows and num_cols representing the number of rows and columns, write nested loops using range() to print a rectangle as shown in the example below.

Ex: If the input is 2 3, then the output is:
* * * 
* * * 

num_rows = int(input())
num_cols = int(input())

''' Your solution goes here '''

for row in range(num_rows):
    for col in range(num_cols):
        print('*', end=' ')
    print()

-------------------------------------------------------------------------

Given num_rows and num_cols, print a list of all seats in a theater. Rows are numbered, columns lettered, as in 1A or 3E. Print a space after each seat.

Sample output with inputs: 2 3
1A 1B 1C 2A 2B 2C 


num_rows = int(input())
num_cols = int(input())

# Note 1: You will need to declare more variables
# Note 2: Place end=' ' at the end of your print statement to separate seats by spaces

def num_to_letter(num):
    return chr(ord('A') + num)

for row in range(1, num_rows + 1):
    for col in range(num_cols):
        seat = f"{row}{num_to_letter(col)}"
        print(seat, end=' ')
# Print a space after each seat in the row
 ------------------------------------------------------------------------------------

zyDE 4.11.1: Loop else example: Finding a legal baby name.
The country of Denmark allows parents to pick from around 7,000 names for newborn infants. Names not on the list must receive special approval from the Names Investigation Department of Copenhagen University. [(Surprisingly, many countries have naming laws, probably to avoid names like "Brfxxccxxmnpcccclllmmnprxvclmnckssqlbb11116" (pronounced "Albin").]

The program below checks if a user-entered name is an appropriate Danish name. If the name is not found in the list of legal names, then a suggestion is made to a close match. If no close matches are found, the loop else clause informs the user. Note that the program uses a function called edit_distance, which calculates string edit distance, or how many characters are different between two strings. For example, the edit distance of "DOG" and "DIG" is 1, because changing the middle character would make the strings equivalent.

Run the program below.

Enter the acceptable name "Bjork".
Try the name "Michaal", which is not an acceptable name – the program will suggest a replacement based on the edit distance.
Try the name "Zoidberg", which is not close at all to any acceptable Danish names – the program will print a special message and terminate.



import edit_distance

#A few legal, acceptable Danish names
legal_names = ['Thor', 'Bjork', 'Bailey', 'Anders', 'Bent', 'Bjarne', 'Bjorn', 
    'Claus', 'Emil', 'Finn', 'Jakob', 'Karen', 'Julie', 'Johanne', 'Anna', 'Anne', 
    'Bente', 'Eva', 'Helene', 'Ida', 'Inge', 'Susanne', 'Sofie', 'Rikkie', 'Pia', 
    'Torben', 'Soren', 'Rune', 'Rasmus', 'Per', 'Michael', 'Mads', 'Hanne', 
    'Dorte'
]

user_name = input('Enter desired name:\n')
if user_name in legal_names:
    print('{} is an acceptable Danish name. Congratulations.'.format(user_name))
else:
    print('{} is not acceptable.'.format(user_name))
    for name in legal_names:
        if edit_distance.distance(name, user_name)  < 2:
            print('You might consider: {},'.format(name), end=' ')
            break
    else:
        print('No close matches were found.')
print('Goodbye.')

-----------------------------------------------------------------------------------------------------------------

A programmer commonly requires both the current position index and corresponding element value when iterating over a sequence. The example below demonstrates how using a for loop with range() and len() to iterate over a sequence generates a position index but requires extra code to retrieve a value.


origins = [4, 8, 10]

for index in range(len(origins)):
    value = origins[index]  # Retrieve value of element in list.
    print('Element {}: {}'.format(index, value))


origins = [4, 8, 10]

for value in origins:
    index = origins.index(value)  # Retrieve inde


origins = [4, 8, 10]

for (index, value) in enumerate(origins):
    print('Element {}: {}'.format(index, value))

--------------------------------------------------------------



The following is a sample programming lab activity; not all classes using a zyBook require students to fully complete this activity. No auto-checking is performed. Users planning to fully complete this program may consider first developing their code in a separate programming environment.

Analyzing dice rolls is a common example in understanding probability and statistics. The following program calculates the number of times the sum of two dice (randomly rolled) is equal to six or seven.


import random

num_sixes = 0
num_sevens = 0
num_rolls = int(input('Enter number of rolls:\n'))

if num_rolls >= 1:
    for i in range(num_rolls):
        die1 = random.randint(1,6)
        die2 = random.randint(1,6)
        roll_total = die1 + die2

        #Count number of sixes and sevens
        if roll_total == 6:
            num_sixes = num_sixes + 1
        if roll_total == 7:
            num_sevens = num_sevens + 1
        print('Roll {} is {} ({} + {})'.format(i, roll_total, die1, die2))

-------------------------------------------------------------------------------


    print('\nDice roll statistics:')
    print('6s:', num_sixes)
    print('7s:', num_sevens)
else:
    print('Invalid number of rolls. Try again.')

-------------------------------------------------------------------------------



import random

# Generate a random number between 1 and 100
num = random.randint(1, 100)

print("Higher/Lower Game!")
print("Guess a number between 1 and 100. You have 5 attempts.")

# Game loop with 5 attempts
for attempt in range(5):
    try:
        # Get user's guess
        guess = int(input(f"Attempt {attempt + 1}/5: Your guess: "))

        # Check if the guess is out of range
        if guess < 1 or guess > 100:
            print("Out of range! Try a number between 1 and 100.")
            continue

        # Check the guess
        if guess == num:
            print(f"Bingo! The number was {num}.")
            break
        elif guess < num:
            print("Higher!")
        else:
            print("Lower!")
    except ValueError:
        print("Not a valid number. Try again!")

    # Check if this was the last attempt
    if attempt == 4:
        print(f"Game over! The number was {num}.")

# Loop ends here, no need for else

--------------------------------------------------------------------------------------
#### high numbe , low number Game

import random

print("Welcome to the higher/lower game, Bella!")

# Let the player choose the bounds
lower_bound = int(input("Enter the lower bound: "))
upper_bound = int(input("Enter the upper bound: "))

# Ensure the upper bound is greater than the lower bound
while upper_bound <= lower_bound:
    print("The upper bound must be greater than the lower bound.")
    upper_bound = int(input("Enter the upper bound again: "))

# Generate a random number within the specified bounds
num = random.randint(lower_bound, upper_bound)

print("Great! Now guess a number between", lower_bound, "and", upper_bound)

# Game loop
for attempt in range(5):
    try:
        # Prompt for user guess
        guess = int(input("Guess a number: "))
        
        # Check if guess is out of bounds
        if guess < lower_bound or guess > upper_bound:
            print("Out of range! Try a number between", lower_bound, "and", upper_bound)
            continue

        # Compare guess with the number
        if guess == num:
            print("You got it!")
            break
        elif guess < num:
            print("Nope, too low.")
        else:
            print("Nope, too high.")
    except ValueError:
        print("Not a valid number. Try again!")

else:
    # If the loop completes without a correct guess
    print("Game over! The number was", num)

