loop. Game 


class Game:
    def __init__(self):
        self.rooms = {
            "Entrance": {"South": "Guard Post"},
            "Guard Post": {"North": "Entrance", "East": "Cell Block A", "South": "Kitchen"},
            "Cell Block A": {"West": "Guard Post"},
            "Kitchen": {"North": "Guard Post", "West": "Maintenance Room", "East": "Cell Block B"},
            "Cell Block B": {"West": "Kitchen"},
            "Maintenance Room": {"East": "Kitchen", "South": "Control Room"},
            "Laundry": {"South": "Control Room", "West": "Maintenance Room"},
            "Control Room": {"North": "Maintenance Room", "East": "Laundry", "West": "Warden's Office"},
            "Warden's Office": {"East": "Control Room"}
        }
        self.items = {
            "Guard Post": "Flashlight",
            "Cell Block A": "Lockpick",
            "Cell Block B": "Disguise Kit",
            "Kitchen": "Knife",
            "Maintenance Room": "Wires",
            "Laundry": "Uniform",
            "Control Room": "Keycard"
        }
        self.player_position = "Entrance"
        self.inventory = []

    def valid_directions(self):
        return list(self.rooms[self.player_position].keys())

    def get_map_hint(self, current_position):
        map_hint = "当前地图位置:\n"
        for room, directions in self.rooms.items():
            if room == current_position:
                map_hint += f"-> {room} <-"
            else:
                map_hint += f"   {room}   "
            map_hint += "\n"
        return map_hint

    def move(self, direction):
        if direction in self.valid_directions():
            self.player_position = self.rooms[self.player_position][direction]
            print(f"你移动到了{self.player_position}。")
            print(self.get_map_hint(self.player_position))
            if self.player_position == "Warden's Office" and len(self.items) > 0:
                print("你在收集所有物品之前就遇到了监狱长。游戏结束！")
                return False
        else:
            print("无效方向，请重新输入。")
        return True

    def get_item(self):
        if self.player_position in self.items:
            item = self.items[self.player_position]
            print(f"你可以选择的物品: {item}")
            item_to_get = input("你想获取哪个物品？请输入物品名称，或按回车取消: ").strip().lower()
            if item_to_get == item.lower():
                self.inventory.append(item)
                print(f"你收集了{item}。")
                del self.items[self.player_position]
            elif item_to_get:  # If not empty and doesn't match
                print(f"你输入的物品 '{item_to_get}' 不存在此房间。")
            else:
                print("你取消了获取物品。")
        else:
            print("此房间没有可获取的物品。")

    def all_items_collected(self):
        return len(self.items) == 0

    def play(self):
        print("欢迎来到逃离哨兵监狱！你的任务是收集所有物品然后面对监狱长。")
        while True:
            print(f"\n你现在在{self.player_position}。")
            print(self.get_map_hint(self.player_position))
            if self.player_position != "Entrance" and self.player_position != "Warden's Office":
                print(f"房间里的物品: {self.items.get(self.player_position, '无')}")    
            print(f"可以移动的方向: {', '.join(self.valid_directions())}")
            print(f"背包里的物品: {', '.join(self.inventory)}")

            action = input("你想(M)移动还是(G)获取物品？请输入 'M' 或 'G': ").lower()
            if action == 'm':
                direction = input("请输入方向（北/南/东/西）：").capitalize()
                if not self.move(direction):
                    break
            elif action == 'g':
                self.get_item()
            else:
                print("输入错误，请选择 'M' 移动或 'G' 获取物品。")

            if self.all_items_collected():
                print("你已经收集了所有物品。现在你可以挑战监狱长了！")
                if self.player_position == "Warden's Office":
                    print("恭喜！你成功地逃出了监狱并救出了所有人质!")
                    break

if __name__ == "__main__":
    game = Game()
    game.play()

_______________________________________________________________________________________________________


update version: east room has more than 1 item to pick, update the collectable itesm to code1  code 2 code3 code4 and code5 code6 code7

class Game:
    def __init__(self):
        self.rooms = {
            "Entrance": {"South": "Guard Post"},
            "Guard Post": {"North": "Entrance", "East": "Cell Block A", "South": "Kitchen"},
            "Cell Block A": {"West": "Guard Post"},
            "Kitchen": {"North": "Guard Post", "West": "Maintenance Room", "East": "Cell Block B"},
            "Cell Block B": {"West": "Kitchen"},
            "Maintenance Room": {"East": "Kitchen", "South": "Control Room"},
            "Laundry": {"South": "Control Room", "West": "Maintenance Room"},
            "Control Room": {"North": "Maintenance Room", "East": "Laundry", "West": "Warden's Office"},
            "Warden's Office": {"East": "Control Room"}
        }
        self.collectibles = {
            "Guard Post": "code1",
            "Cell Block A": "code2",
            "Cell Block B": "code3",
            "Kitchen": "code4",
            "Maintenance Room": "code5",
            "Laundry": "code6",
            "Control Room": "code7"
        }
        self.items = {
            "Guard Post": ["code1", "Old Magazine"],
            "Cell Block A": ["code2", "Broken Mirror"],
            "Cell Block B": ["code3", "Dirty Clothes"],
            "Kitchen": ["code4", "Rusty Spoon"],
            "Maintenance Room": ["code5", "Burnt Lightbulb"],
            "Laundry": ["code6", "Torn Shirt"],
            "Control Room": ["code7", "Expired Coffee"]
        }
        self.player_position = "Entrance"
        self.inventory = []

    def valid_directions(self):
        return list(self.rooms[self.player_position].keys())

    def get_map_hint(self, current_position):
        map_hint = "当前地图位置:\n"
        for room, directions in self.rooms.items():
            if room == current_position:
                map_hint += f"-> {room} <-"
            else:
                map_hint += f"   {room}   "
            map_hint += "\n"
        return map_hint

    def move(self, direction):
        if direction in self.valid_directions():
            self.player_position = self.rooms[self.player_position][direction]
            print(f"你移动到了{self.player_position}。")
            print(self.get_map_hint(self.player_position))
            if self.player_position == "Warden's Office" and len(self.collectibles) > 0:
                print("你在收集所有代码之前就遇到了监狱长。游戏结束！")
                return False
        else:
            print("无效方向，请重新输入。")
        return True

    def get_item(self):
        if self.player_position in self.items:
            print(f"此房间的物品: {', '.join(self.items[self.player_position])}")
            item_to_get = input("你想获取哪个物品？请输入物品名称，或按回车取消: ").strip().lower()
            if item_to_get in [item.lower() for item in self.items[self.player_position]]:
                if item_to_get in self.collectibles.values():
                    self.inventory.append(item_to_get)
                    print(f"你收集了{item_to_get}。")
                    self.collectibles.pop(self.player_position, None)
                    # Remove the item from the room's item list
                    self.items[self.player_position].remove(item_to_get)
                else:
                    print(f"你捡起了{item_to_get}，但它不是你要找的代码。")
            elif item_to_get:  # If not empty but doesn't match
                print(f"你输入的物品 '{item_to_get}' 不存在此房间。")
            else:
                print("你取消了获取物品。")
        else:
            print("此房间没有可获取的物品。")

    def all_items_collected(self):
        return len(self.collectibles) == 0

    def play(self):
        print("欢迎来到逃离哨兵监狱！你的任务是收集所有代码然后面对监狱长。")
        while True:
            print(f"\n你现在在{self.player_position}。")
            print(self.get_map_hint(self.player_position))
            if self.player_position != "Entrance" and self.player_position != "Warden's Office":
                print(f"房间里的物品: {', '.join(self.items.get(self.player_position, []))}")
            print(f"可以移动的方向: {', '.join(self.valid_directions())}")
            print(f"背包里的物品: {', '.join(self.inventory)}")

            action = input("你想(M)移动还是(G)获取物品？请输入 'M' 或 'G': ").lower()
            if action == 'm':
                direction = input("请输入方向（北/南/东/西）：").capitalize()
                if not self.move(direction):
                    break
            elif action == 'g':
                self.get_item()
            else:
                print("输入错误，请选择 'M' 移动或 'G' 获取物品。")

            if self.all_items_collected():
                print("你已经收集了所有代码。现在你可以挑战监狱长了！")
                if self.player_position == "Warden's Office":
                    print("恭喜！你成功地逃出了监狱并救出了所有人质!")
                    break

if __name__ == "__main__":
    game = Game()
    game.play()
_____________________________________________________________________________________________________________



import random

class Game:
    def __init__(self):
        self.rooms = {
            "Entrance": {"South": "Guard Post"},
            "Guard Post": {"North": "Entrance", "East": "Cell Block A", "South": "Kitchen"},
            "Cell Block A": {"West": "Guard Post", "South": "Secret Passage"},
            "Kitchen": {"North": "Guard Post", "West": "Maintenance Room", "East": "Cell Block B"},
            "Cell Block B": {"West": "Kitchen", "South": "Infirmary"},
            "Maintenance Room": {"East": "Kitchen", "South": "Control Room"},
            "Laundry": {"South": "Control Room", "West": "Maintenance Room"},
            "Control Room": {"North": "Maintenance Room", "East": "Laundry", "West": "Warden's Office"},
            "Warden's Office": {"East": "Control Room"},
            "Secret Passage": {"North": "Cell Block A", "East": "Infirmary"},
            "Infirmary": {"West": "Secret Passage", "North": "Cell Block B"}
        }
        self.collectibles = {
            "Guard Post": "code1",
            "Cell Block A": "code2",
            "Cell Block B": "code3",
            "Kitchen": "code4",
            "Maintenance Room": "code5",
            "Laundry": "code6",
            "Control Room": "code7"
        }
        self.items = {
            "Guard Post": ["code1", "Old Magazine", "Broken Flashlight"],
            "Cell Block A": ["code2", "Broken Mirror", "Mysterious Note"],
            "Cell Block B": ["code3", "Dirty Clothes", "Guard's Key"],
            "Kitchen": ["code4", "Rusty Spoon", "Fresh Apple"],
            "Maintenance Room": ["code5", "Burnt Lightbulb", "Wire Cutters"],
            "Laundry": ["code6", "Torn Shirt", "Laundry Cart"],
            "Control Room": ["code7", "Expired Coffee", "Monitor"],
            "Secret Passage": ["Map Piece", "Rusty Knife"],
            "Infirmary": ["Medikit", "Antidote"]
        }
        self.player_position = "Entrance"
        self.inventory = []
        self.health = 100
        self.puzzles = {
            "Cell Block A": {"solved": False, "question": "What is the sum of 7 and 8?", "answer": "15"},
            "Kitchen": {"solved": False, "question": "Solve: X + 5 = 10", "answer": "5"}
        }
        self.traps = {
            "Maintenance Room": {"active": True, "damage": 20},
            "Secret Passage": {"active": True, "damage": 30}
        }

    def valid_directions(self):
        return list(self.rooms[self.player_position].keys())

    def get_map_hint(self, current_position):
        map_hint = "Current Map:\n"
        for room in self.rooms:
            line = "   "
            if room == current_position:
                line += f"-> {room} <-"
            else:
                line += f"   {room}   "
            
            # Add connections for each room in a simplified manner
            connections = []
            for direction, connected_room in self.rooms[room].items():
                if connected_room == current_position:
                    connections.append(f"{direction[0].upper()}")
                else:
                    connections.append(f"{direction[0].lower()}")
            line += f" ({','.join(connections)})"
            map_hint += line + "\n"
        return map_hint

    def move(self, direction):
        if direction in self.valid_directions():
            new_room = self.rooms[self.player_position][direction]
            self.player_position = new_room
            print(f"You moved to {self.player_position}.")
            print(self.get_map_hint(self.player_position))
            if new_room in self.traps and self.traps[new_room]["active"]:
                damage = self.traps[new_room]["damage"]
                self.health -= damage
                print(f"You triggered a trap and took {damage} damage! Your health is now {self.health}.")
                self.traps[new_room]["active"] = False  
                if self.health <= 0:
                    print("You've lost all your health. Game over.")
                    return False
            if self.player_position == "Warden's Office" and len(self.collectibles) > 0:
                print("You encountered the Warden before collecting all the codes. Game over!")
                return False
        else:
            print("Invalid direction, please try again.")
        return True

    def get_item(self):
        if self.player_position in self.items:
            print(f"Items in this room: {', '.join(self.items[self.player_position])}")
            item_to_get = input("Which item do you want to pick up? (or press Enter to cancel): ").strip().lower()
            if item_to_get in [item.lower() for item in self.items[self.player_position]]:
                if item_to_get in self.collectibles.values():
                    self.inventory.append(item_to_get)
                    print(f"You collected {item_to_get}.")
                    self.collectibles.pop(self.player_position, None)
                else:
                    self.inventory.append(item_to_get)
                    print(f"You picked up {item_to_get}.")
                self.items[self.player_position].remove(item_to_get)
            elif item_to_get:  
                print(f"The item '{item_to_get}' does not exist in this room.")
            else:
                print("You canceled picking up an item.")
        else:
            print("There are no items to pick up in this room.")

    def solve_puzzle(self):
        if self.player_position in self.puzzles and not self.puzzles[self.player_position]["solved"]:
            puzzle = self.puzzles[self.player_position]
            answer = input(f"Solve this puzzle: {puzzle['question']}\nEnter your answer: ")
            if answer == puzzle["answer"]:
                print("You solved the puzzle!")
                puzzle["solved"] = True
                self.inventory.append("Puzzle Key")
            else:
                print("Wrong answer.")

    def use_item(self):
        if self.inventory:
            item = input(f"Which item do you want to use? {', '.join(self.inventory)}: ").strip().lower()
            if item in self.inventory:
                if item == "antidote" and self.player_position == "Maintenance Room":
                    print("You used the antidote, restoring 20 health points.")
                    self.health = min(100, self.health + 20)
                elif item == "wire cutters" and self.player_position == "Control Room":
                    print("You used the wire cutters to disable the security lock. The code7 is now accessible.")
                    self.collectibles["Control Room"] = "code7"
                elif item == "puzzle key" and self.player_position == "Secret Passage":
                    print("You used the puzzle key to unlock the secret passage.")
                    self.rooms["Cell Block A"]["South"] = "Secret Passage"
                else:
                    print("This item can't be used here.")
                return True  # Item was used
            else:
                print("You don't have that item in your inventory.")
                return False  # Item was not used
        else:
            print("Your inventory is empty.")
            return False  # No items to use

    def all_items_collected(self):
        return len(self.collectibles) == 0

    def play(self):
        print("Welcome to Escape from Sentinel Prison! Your mission is to collect all codes and confront the Warden.")
        while True:
            print(f"\nYou are now in {self.player_position}.")
            print(self.get_map_hint(self.player_position))
            if self.player_position != "Entrance" and self.player_position != "Warden's Office":
                print(f"Items in this room: {', '.join(self.items.get(self.player_position, []))}")
                if self.player_position in self.puzzles and not self.puzzles[self.player_position]["solved"]:
                    print("There's an unsolved puzzle here.")
            print(f"Directions available: {', '.join(self.valid_directions())}")
            print(f"Items in your inventory: {', '.join(self.inventory)}")
            print(f"Your health: {self.health}")

            action = input("Do you want to (M)ove, (G)et item, (S)olve puzzle, or (U)se item? Enter 'M', 'G', 'S', or 'U': ").lower()
            if action == 'm':
                direction = input("Enter direction (North/South/East/West): ").capitalize()
                if not self.move(direction):
                    break
            elif action == 'g':
                self.get_item()
            elif action == 's':
                if self.player_position in self.puzzles and not self.puzzles[self.player_position]["solved"]:
                    self.solve_puzzle()
                else:
                    print("There's no puzzle to solve here.")
            elif action == 'u':
                if not self.use_item():
                    print("You couldn't use an item at this time.")
            else:
                print("Invalid input. Please choose 'M' to move, 'G' to get an item, 'S' to solve a puzzle, or 'U' to use an item.")

            if self.all_items_collected():
                print("You've collected all the codes. Now you can challenge the Warden!")
                if self.player_position == "Warden's Office":
                    print("Congratulations! You've successfully escaped the prison and saved all the hostages!")
                    break

if __name__ == "__main__":
    game = Game()
    game.play()
----------------------------------------------------------------------------
homnework 2

class SpyGame:
    # Initialize the game with departments, items, traps, and player attributes
    def __init__(self):
        # Map: Each department connects to others via directions (N/S/E/W)
        self.departments = {
            "Entrance": {"South": "Lobby"},
            "Lobby": {"North": "Entrance", "East": "Communications", "South": "Cafeteria"},
            "Communications": {"West": "Lobby", "South": "Server Room"},
            "Cafeteria": {"North": "Lobby", "West": "Maintenance", "East": "Research Lab"},
            "Research Lab": {"West": "Cafeteria", "South": "Medical Bay"},
            "Maintenance": {"East": "Cafeteria", "South": "Control Room"},
            "Server Room": {"North": "Communications", "East": "Medical Bay"},
            "Control Room": {"North": "Maintenance", "East": "Armory", "West": "Director's Office"},
            "Director's Office": {"East": "Control Room"},  # Final room
            "Armory": {"West": "Control Room"},
            "Medical Bay": {"North": "Research Lab", "West": "Server Room"}
        }

        # Critical intelligence to collect in key departments
        self.intelligence_items = {
            "Lobby": "Intel1",
            "Communications": "Intel2",
            "Research Lab": "Intel3",
            "Maintenance": "Intel4",
            "Server Room": "Intel5",
            "Control Room": "Intel6",
            "Director's Office": "Intel7"
        }

        # Items available in each department (intelligence + distractions)
        self.items = {
            "Lobby": ["Intel1", "Coffee Mug"],
            "Communications": ["Intel2", "Old Radio"],
            "Research Lab": ["Intel3", "Broken Drone"],
            "Maintenance": ["Intel4", "Wrench"],
            "Server Room": ["Intel5", "Data Cable"],
            "Control Room": ["Intel6", "USB Drive"],
            "Director's Office": ["Intel7", "Confidential Folder"],
        }

        # Spy's initial position, inventory, and detection level
        self.spy_position = "Entrance"  # Start of the game
        self.inventory = []             # Items collected
        self.detection_level = 0        # Spy detection level (too high = caught!)

        # Security traps in high-security areas
        self.traps = {
            "Maintenance": {"active": True, "detection": 30},
            "Armory": {"active": True, "detection": 40}
        }

    # Get valid directions available to move in the current department
    def valid_directions(self):
        return list(self.departments[self.spy_position].keys())

    # Handle movement between departments
    def move(self, direction):
        """
        Moves the spy in the specified direction.
        Triggers traps in high-security areas.
        """
        if direction in self.valid_directions():  # Check if the move is valid
            new_department = self.departments[self.spy_position][direction]
            self.spy_position = new_department  # Update spy position
            print(f"You entered the {self.spy_position}.")

            # Trigger traps if in a high-security department
            if new_department in self.traps and self.traps[new_department]["active"]:
                detection = self.traps[new_department]["detection"]
                self.detection_level += detection
                print(f"ALERT! Security systems activated! Detection level increased by {detection}.")
                print(f"Current detection level: {self.detection_level}%")
                self.traps[new_department]["active"] = False  # Deactivate trap after triggering

                # End the game if detection level exceeds 100%
                if self.detection_level >= 100:
                    print("You've been detected and captured! Mission failed.")
                    return False

            # Check for premature entry into the Director's Office
            if self.spy_position == "Director's Office" and len(self.intelligence_items) > 0:
                print("You entered the Director's Office without collecting all intelligence. You've been caught!")
                return False
        else:
            print("Invalid direction. Choose another path.")
        return True

    # Handle collecting intelligence items in the current department
    def get_item(self):
        """
        Allows the spy to collect intelligence items.
        Removes the collected items from the department.
        """
        # Check if items exist in the current department
        if self.spy_position in self.items and self.items[self.spy_position]:
            print(f"Items in this department: {', '.join(self.items[self.spy_position])}")
            item_to_get = input("Which item do you want to collect? (or press Enter to skip): ").strip().lower()

            # Normalize items for case-insensitive matching
            available_items = {item.lower(): item for item in self.items[self.spy_position]}

            # Check if input matches an item
            if item_to_get in available_items:
                real_item = available_items[item_to_get]
                if real_item in self.intelligence_items.values():
                    self.inventory.append(real_item)
                    print(f"Critical intelligence collected: {real_item}.")
                    self.intelligence_items.pop(self.spy_position, None)  # Remove intelligence from the map
                else:
                    self.inventory.append(real_item)
                    print(f"Collected {real_item}.")
                self.items[self.spy_position].remove(real_item)  # Remove item from the department
            elif item_to_get:
                print(f"'{item_to_get}' is not in this department.")
            else:
                print("You chose not to collect anything.")
        else:
            print("No items to collect in this department.")

    # Check if all intelligence items have been collected
    def all_intelligence_collected(self):
        """
        Returns True if all intelligence has been collected.
        """
        return len(self.intelligence_items) == 0

    # Main game loop
    def play(self):
        """
        Main game loop: Move, collect items, and avoid detection.
        Game ends when all intelligence is collected, or the spy is caught.
        """
        print("Welcome, Agent. Your mission: Infiltrate the headquarters and steal all critical intelligence.")
        print("Avoid detection at all costs. Good luck!")

        while True:
            # Display current game status
            print(f"\nYou are now in the {self.spy_position}.")
            print(f"Available directions: {', '.join(self.valid_directions())}")
            print(f"Items in your inventory: {', '.join(self.inventory)}")
            print(f"Detection Level: {self.detection_level}%")

            # Prompt the player for action
            action = input("Do you want to (M)ove or (G)et item? Enter 'M' or 'G': ").lower()
            if action == 'm':  # Move to a different department
                direction = input("Enter direction (North/South/East/West): ").capitalize()
                if not self.move(direction):
                    break
            elif action == 'g':  # Collect items in the department
                self.get_item()
            else:
                print("Invalid action. Please enter 'M' to move or 'G' to collect items.")

            # Check for win condition
            if self.all_intelligence_collected():
                print("Mission update: All critical intelligence collected. Head to the Director's Office to complete your mission.")
                if self.spy_position == "Director's Office":
                    print("Congratulations, Agent! You've successfully infiltrated the headquarters and completed your mission!")
                    break


if __name__ == "__main__":
    # Start the game
    game = SpyGame()
    game.play()

